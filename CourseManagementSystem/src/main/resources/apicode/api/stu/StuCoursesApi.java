/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package apicode.api.stu;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import javax.validation.Valid;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-20T21:44:39.267865700+08:00[Asia/Shanghai]")

@Validated
@Api(value = "stu_courses", description = "the stu_courses API")
public interface StuCoursesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /stu_courses/available : 查询所有可选课程
     * 查询数据库中课程状态为“开放”的所有课程。 可选的筛选条件 
     *
     * @param stuId  (required)
     * @param couName 课程名 (optional)
     * @param claId 教学班号 (optional)
     * @param couRank 课程等级 (optional)
     * @param couLanguage 授课语言 (optional)
     * @param claWeekday 上课时间（周几） (optional)
     * @param claDaytime 上课时间（第几节） (optional)
     * @return  (status code 200)
     *         or  (status code 404)
     */
    @ApiOperation(value = "查询所有可选课程", nickname = "stuCoursesAvailableGet", notes = "查询数据库中课程状态为“开放”的所有课程。 可选的筛选条件 ", response = Object.class, tags={ "学生stu域名内容/学生选退课（QXY）", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Object.class),
        @ApiResponse(code = 404, message = "", response = Object.class) })
    @RequestMapping(value = "/stu_courses/available",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.GET)
    default ResponseEntity<Object> stuCoursesAvailableGet(@ApiParam(value = "", required=true) @RequestPart(value="stu_id", required=true)  Integer stuId,@ApiParam(value = "课程名") @Valid @RequestParam(value = "cou_name", required = false) String couName,@ApiParam(value = "教学班号") @Valid @RequestParam(value = "cla_id", required = false) String claId,@ApiParam(value = "课程等级") @Valid @RequestParam(value = "cou_rank", required = false) String couRank,@ApiParam(value = "授课语言") @Valid @RequestParam(value = "cou_language", required = false) String couLanguage,@ApiParam(value = "上课时间（周几）") @Valid @RequestParam(value = "cla_weekday", required = false) Integer claWeekday,@ApiParam(value = "上课时间（第几节）") @Valid @RequestParam(value = "cla_daytime", required = false) Integer claDaytime) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /stu_courses/enroll : 选课
     * 验证学生状态是否正常（例如未被注销或停学）。 验证课程状态是否开放（例如是否已关闭或满员）。 检查学生是否已选该课程，避免重复选课。 将选课信息存入数据库。 
     *
     * @param body  (optional)
     * @return  (status code 200)
     *         or  (status code 404)
     */
    @ApiOperation(value = "选课", nickname = "stuCoursesEnrollPost", notes = "验证学生状态是否正常（例如未被注销或停学）。 验证课程状态是否开放（例如是否已关闭或满员）。 检查学生是否已选该课程，避免重复选课。 将选课信息存入数据库。 ", response = Object.class, tags={ "学生stu域名内容/学生选退课（QXY）", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Object.class),
        @ApiResponse(code = 404, message = "", response = Object.class) })
    @RequestMapping(value = "/stu_courses/enroll",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Object> stuCoursesEnrollPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stu_courses/enrolled : 查询已选课程
     * 验证传入的student_id是否存在。 查询数据库中与该学生ID关联的所有选课记录。 
     *
     * @param stuId  (required)
     * @return  (status code 200)
     *         or  (status code 404)
     */
    @ApiOperation(value = "查询已选课程", nickname = "stuCoursesEnrolledGet", notes = "验证传入的student_id是否存在。 查询数据库中与该学生ID关联的所有选课记录。 ", response = Object.class, tags={ "学生stu域名内容/学生选退课（QXY）", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Object.class),
        @ApiResponse(code = 404, message = "", response = Object.class) })
    @RequestMapping(value = "/stu_courses/enrolled",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.GET)
    default ResponseEntity<Object> stuCoursesEnrolledGet(@ApiParam(value = "", required=true) @RequestPart(value="stu_id", required=true)  Integer stuId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
