{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//import api from '../api';\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nexport default {\n  data() {\n    //验证规则\n    var validateID = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error(\"请输入你的id\"));\n      } else {\n        callback();\n      }\n    };\n    var validateUserAccount = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error(\"请输入你的账号\"));\n      } else if (value.length < 2) {\n        callback(new Error(\"长度不够\"));\n      } else {\n        callback();\n      }\n    };\n    var validatePassWord = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error(\"请输入你的密码\"));\n      } else {\n        callback();\n      }\n    };\n    var validateConfigurePassWord = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error(\"请输入密码\"));\n      } else if (value !== this.registerForm.password) {\n        callback(new Error(\"两次密码不一致\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      currentIndex: \"login\",\n      loginForm: {\n        user_id: \"\",\n        user_account: \"\",\n        password: \"\",\n        role: \"\"\n      },\n      registerForm: {\n        user_account: \"\",\n        password: \"\",\n        configurePassword: \"\",\n        email: \"\"\n      },\n      activeTab: \"login\",\n      rules: {\n        user_id: [{\n          validator: validateID,\n          trigger: 'blur'\n        }],\n        user_account: [{\n          validator: validateUserAccount,\n          trigger: 'blur'\n        }],\n        password: [{\n          validator: validatePassWord,\n          trigger: 'blur'\n        }],\n        configurePassword: [{\n          validator: validateConfigurePassWord,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          const user_id = this.loginForm.user_id; // 获取ID  \n          const user_account = this.loginForm.user_account; // 获取账号  \n          const password = this.loginForm.password; // 获取密码  \n          let userType; // 根据角色设置用户类型  \n\n          // 根据角色设置 userType  \n          switch (this.loginForm.role) {\n            case 'adm':\n              userType = 0; // 教务员  \n              break;\n            case 'tch':\n              userType = 1; // 教师  \n              break;\n            case 'stu':\n              userType = 2; // 学生  \n              break;\n            default:\n              return;\n            // 没有选择角色，直接返回  \n          }\n\n          // 发送登录请求到后端  \n          axios.post('http://localhost:8080/login', {\n            username: user_account,\n            password: password,\n            usertype: userType\n          }).then(response => {\n            if (response.status === 200 && response.data === \"Login successful\") {\n              console.log(\"登录成功:\", response.data);\n              // 根据身份跳转  \n              switch (this.loginForm.role) {\n                case 'adm':\n                  this.$router.push({\n                    name: 'adm_interface',\n                    query: {\n                      user_id,\n                      user_account\n                    }\n                  });\n                  break;\n                case 'tch':\n                  this.$router.push({\n                    name: 'tch_interface',\n                    query: {\n                      user_id,\n                      user_account\n                    }\n                  });\n                  break;\n                case 'stu':\n                  this.$router.push({\n                    name: 'stu_interface',\n                    query: {\n                      user_id,\n                      user_account\n                    }\n                  });\n                  break;\n                default:\n                  break;\n              }\n            }\n          }).catch(error => {\n            if (error.response) {\n              // 检查状态码  \n              if (error.response.status === 401) {\n                console.error(\"登录失败:\", error.response.data);\n                // 使用 ElMessage 提示信息  \n                ElMessage.error(\"无效的用户名或密码。请重试。\");\n              } else {\n                // 处理其他错误状态  \n                console.error(\"登录失败:\", error.response.data);\n                ElMessage.error(\"登录请求失败：\" + error.response.data);\n              }\n            } else if (error.request) {\n              console.error(\"登录失败: 没有收到响应\", error.request);\n              ElMessage.error(\"服务器没有响应，请稍后再试。\");\n            } else {\n              console.error(\"登录失败:\", error.message);\n              ElMessage.error(\"发生了错误：\" + error.message);\n            }\n          });\n        } else {\n          return;\n        }\n      });\n    },\n    clearForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    handleTabsClick(tab) {\n      this.activeTab = tab.props.name;\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","data","validateID","rule","value","callback","Error","validateUserAccount","length","validatePassWord","validateConfigurePassWord","registerForm","password","currentIndex","loginForm","user_id","user_account","role","configurePassword","email","activeTab","rules","validator","trigger","methods","submitForm","formName","$refs","validate","valid","userType","post","username","usertype","then","response","status","console","log","$router","push","name","query","catch","error","request","message","clearForm","resetFields","handleTabsClick","tab","props"],"sources":["D:\\vue_project\\test_project\\jiaowusystem2\\src\\views\\login_interface.vue"],"sourcesContent":["<!--注册界面（全体用户）-->\r\n<template>  \r\n  <div class=\"login\">  \r\n      <el-card style=\"max-width: 480px\" class=\"box-card\">  \r\n          <template #header>  \r\n              <div class=\"card-header\">  \r\n                  <span>教务系统</span>  \r\n              </div>  \r\n          </template>  \r\n          <el-tabs v-model=\"currentIndex\" stretch class=\"demo-tabs\" @tab-click=\"handleTabsClick\">  \r\n              <el-tab-pane label=\"登录\" name=\"login\">\r\n                  <el-form ref=\"loginForm\" :model=\"loginForm\" :rules=\"rules\" status-icon >\r\n                      \r\n                      <el-form-item label=\"账号:\" label-width=\"80px\" prop=\"user_account\">\r\n                          <el-input v-model=\"loginForm.user_account\" type=\"text\"/>\r\n                      </el-form-item>\r\n                      <el-form-item label=\"密码:\" label-width=\"80px\" prop=\"password\">\r\n                          <el-input v-model=\"loginForm.password\" type=\"password\"/>\r\n                      </el-form-item>\r\n                      <el-form-item>\r\n                        <div class=\"mb-2 ml-4\">\r\n                           <el-radio-group v-model=\"loginForm.role\">\r\n                              <el-radio label=\"adm\" size=\"large\">教务员</el-radio>\r\n                              <el-radio label=\"tch\" size=\"large\">教师</el-radio>\r\n                              <el-radio label=\"stu\" size=\"large\">学生</el-radio>\r\n                            </el-radio-group>\r\n                        </div>\r\n                      </el-form-item>\r\n                      <el-form-item>\r\n                          <div class=\"button-container\">\r\n                              <el-button type=\"primary\" @click=\"submitForm('loginForm')\">登录</el-button>\r\n                              <el-button @click=\"clearForm('loginForm')\">清空</el-button>\r\n                          </div>\r\n                      </el-form-item>\r\n                  </el-form>\r\n              </el-tab-pane>        \r\n              \r\n          </el-tabs>  \r\n      </el-card>  \r\n  </div>  \r\n</template>\r\n\r\n<script>\r\n\r\n//import api from '../api';\r\nimport axios from 'axios';\r\nimport { ElMessage } from 'element-plus'; \r\nexport default {\r\n  data() {\r\n      //验证规则\r\n      var validateID = (rule, value, callback) =>{\r\n          if(value === ''){\r\n              callback(new Error(\"请输入你的id\"))\r\n          }\r\n          else{\r\n              callback();\r\n          }\r\n      }\r\n      var validateUserAccount = (rule, value, callback) =>{\r\n          if(value === ''){\r\n              callback(new Error(\"请输入你的账号\"))\r\n          }else if(value.length<2){\r\n              callback(new Error(\"长度不够\"))\r\n          }\r\n          else{\r\n              callback();\r\n          }\r\n      }\r\n      var validatePassWord = (rule, value, callback) =>{\r\n          if(value === ''){\r\n              callback(new Error(\"请输入你的密码\"))\r\n          }\r\n          else{\r\n              callback();\r\n          }\r\n      }\r\n      var validateConfigurePassWord = (rule, value, callback) =>{\r\n          if(value === ''){\r\n              callback(new Error(\"请输入密码\"))\r\n          }else if(value !== this.registerForm.password){\r\n              callback(new Error(\"两次密码不一致\"))\r\n          }\r\n          else{\r\n              callback();\r\n          }\r\n      }\r\n      return {\r\n          currentIndex:\"login\",\r\n          loginForm:{\r\n              user_id:\"\",\r\n              user_account:\"\",\r\n              password:\"\",\r\n              role:\"\",\r\n          },\r\n          registerForm:{\r\n              user_account:\"\",\r\n              password:\"\",\r\n              configurePassword:\"\",\r\n              email:\"\"\r\n          },\r\n          activeTab:\"login\",\r\n          rules:{\r\n              user_id:[\r\n                {\r\n                    validator:validateID,\r\n                    trigger: 'blur'\r\n                }\r\n              ],\r\n              user_account:[\r\n                  {\r\n                      validator: validateUserAccount, \r\n                      trigger: 'blur'\r\n                  }\r\n              ],\r\n              password:[\r\n                  {\r\n                      validator: validatePassWord, \r\n                      trigger: 'blur'\r\n                  }\r\n              ],\r\n              configurePassword:[\r\n                  {\r\n                      validator: validateConfigurePassWord,\r\n                      trigger: 'blur'\r\n                  }\r\n              ]\r\n          }\r\n      }\r\n  },\r\n  methods: {\r\n    submitForm(formName) {  \r\n        this.$refs[formName].validate((valid) => {  \r\n            if (valid) {  \r\n                const user_id = this.loginForm.user_id; // 获取ID  \r\n                const user_account = this.loginForm.user_account; // 获取账号  \r\n                const password = this.loginForm.password; // 获取密码  \r\n                let userType; // 根据角色设置用户类型  \r\n                \r\n                // 根据角色设置 userType  \r\n                switch (this.loginForm.role) {  \r\n                    case 'adm':  \r\n                        userType = 0; // 教务员  \r\n                        break;  \r\n                    case 'tch':  \r\n                        userType = 1; // 教师  \r\n                        break;  \r\n                    case 'stu':  \r\n                        userType = 2; // 学生  \r\n                        break;  \r\n                    default:  \r\n                        return; // 没有选择角色，直接返回  \r\n                }  \r\n\r\n                // 发送登录请求到后端  \r\n                axios.post('http://localhost:8080/login', {  \r\n                    username: user_account,  \r\n                    password: password,  \r\n                    usertype: userType  \r\n                })  \r\n                .then(response => {  \r\n                    if (response.status === 200 && response.data === \"Login successful\") {  \r\n                        console.log(\"登录成功:\", response.data);  \r\n                        // 根据身份跳转  \r\n                        switch (this.loginForm.role) {  \r\n                            case 'adm':  \r\n                                this.$router.push({ name: 'adm_interface', query: { user_id, user_account } });  \r\n                                break;  \r\n                            case 'tch':  \r\n                                this.$router.push({ name: 'tch_interface', query: { user_id, user_account } });  \r\n                                break;  \r\n                            case 'stu':  \r\n                                this.$router.push({ name: 'stu_interface', query: { user_id, user_account } });  \r\n                                break;  \r\n                            default:  \r\n                                break;  \r\n                        }  \r\n                    }  \r\n                })  \r\n                .catch(error => {  \r\n                    if (error.response) {  \r\n                        // 检查状态码  \r\n                        if (error.response.status === 401) {  \r\n                            console.error(\"登录失败:\", error.response.data);  \r\n                            // 使用 ElMessage 提示信息  \r\n                            ElMessage.error(\"无效的用户名或密码。请重试。\");  \r\n                        } else {  \r\n                            // 处理其他错误状态  \r\n                            console.error(\"登录失败:\", error.response.data);  \r\n                            ElMessage.error(\"登录请求失败：\" + error.response.data);  \r\n                        }  \r\n                    } else if (error.request) {  \r\n                        console.error(\"登录失败: 没有收到响应\", error.request);  \r\n                        ElMessage.error(\"服务器没有响应，请稍后再试。\");  \r\n                    } else {  \r\n                        console.error(\"登录失败:\", error.message);  \r\n                        ElMessage.error(\"发生了错误：\" + error.message);  \r\n                    }  \r\n                });  \r\n            } else {  \r\n                return;  \r\n            }  \r\n        });  \r\n    },  \r\n      clearForm(formName) {\r\n            this.$refs[formName].resetFields();\r\n        },\r\n      handleTabsClick(tab){\r\n          this.activeTab=tab.props.name;\r\n      }\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang='stylus' scoped>\r\n\r\n.login{\r\n    width: 1200px;\r\n    margin: 0 auto;\r\n    .box-card{\r\n        width: 480px;\r\n        margin-top: 175px;\r\n        margin-left: 350px; \r\n    }\r\n    .el-button{\r\n      margin-right: 100px;\r\n    }\r\n    .button-container{\r\n      margin-left: 100px; /* 调整为你希望的距离 */\r\n      text-align: center;\r\n    }\r\n    .el-radio-group{\r\n      margin-left: 100px;\r\n    }\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}