{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      user_id: '',\n      user_account: '',\n      IsChangetchGradeRoute: false,\n      selectedRow: null,\n      // 用来存储选中的行  \n      tableData: [] // 初始化为空数组  \n    };\n  },\n  watch: {\n    '$route'(to) {\n      this.checkRoute(to);\n    }\n  },\n  created() {\n    // 从查询参数中获取 id 和账号  \n    this.user_id = this.$route.query.user_id;\n    this.user_account = this.$route.query.user_account;\n    this.checkRoute(this.$route);\n    this.fetchTableData(); // 获取表格数据  \n  },\n  methods: {\n    checkRoute(route) {\n      const ChangetchGradeRoute = ['tch_specific_grade'];\n      this.IsChangetchGradeRoute = ChangetchGradeRoute.includes(route.name);\n    },\n    goToTeacherHome() {\n      this.$router.go(-1);\n    },\n    goToSpecificGrade() {\n      const {\n        cla_id,\n        cou_name\n      } = this.selectedRow;\n      this.$router.push({\n        name: 'tch_specific_grade',\n        query: {\n          user_id: this.user_id,\n          user_account: this.user_account,\n          cla_id: cla_id,\n          // 传递教学班ID  \n          cou_name: cou_name // 传递课程名称  \n        }\n      });\n    },\n    handleRowClick(row) {\n      this.selectedRow = row;\n      console.log('选中的行：', row);\n    },\n    tableRowClassName(row) {\n      return row === this.selectedRow ? 'highlight-row' : '';\n    },\n    clearSelection() {\n      this.selectedRow = null;\n      console.log('取消选择，已清空选中的行');\n    },\n    fetchTableData() {\n      // 使用 GET 请求，将 claTchId 作为查询参数  \n      const claTchId = this.user_id; // 根据实际情况设置 claTchId  \n\n      // 发送 GET 请求  \n      axios.get('http://localhost:8080/tch/studentGrade/conditionSearch2', {\n        params: {\n          claTchId: claTchId // 将参数添加到查询字符串中  \n        }\n      }).then(response => {\n        // 处理响应数据，去重  \n        const uniqueCourses = {};\n        response.data.forEach(item => {\n          if (!uniqueCourses[item.claID]) {\n            uniqueCourses[item.claID] = item.couName;\n          }\n        });\n\n        // 将去重后的数据转换为数组  \n        this.tableData = Object.keys(uniqueCourses).map(claID => ({\n          cla_id: claID,\n          cou_name: uniqueCourses[claID]\n        }));\n      }).catch(error => {\n        console.error('获取表格数据失败:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","user_id","user_account","IsChangetchGradeRoute","selectedRow","tableData","watch","$route","to","checkRoute","created","query","fetchTableData","methods","route","ChangetchGradeRoute","includes","name","goToTeacherHome","$router","go","goToSpecificGrade","cla_id","cou_name","push","handleRowClick","row","console","log","tableRowClassName","clearSelection","claTchId","get","params","then","response","uniqueCourses","forEach","item","claID","couName","Object","keys","map","catch","error"],"sources":["D:\\vue_project\\test_project\\jiaowusystem2\\src\\views\\main\\tch_grade.vue"],"sourcesContent":["<template>\r\n  <div class=\"grade-content\">\r\n    <div v-if=\"IsChangetchGradeRoute\">  \r\n      <router-view></router-view> <!-- 仅渲染子组件 -->  \r\n    </div> \r\n    <div v-if=\"!IsChangetchGradeRoute\">\r\n      <el-container>\r\n        <el-header> \r\n          <img src=\"@/assets/2.jpg\" alt=\"Icon\" class=\"badge\"> \r\n          <h3 style=\"margin-right: auto;\">某某学校教师端——我的评分页面</h3>    \r\n          <div class=\"user-info\">  \r\n            <h3>账号：{{ user_account }}</h3>  \r\n            <h3>ID: {{ user_id }}</h3>  \r\n          </div>  \r\n          <el-button type=\"danger\" style=\"float: right;\" @click=\"goToTeacherHome\">返回</el-button>  \r\n        </el-header>\r\n\r\n        <el-main class=\"main-content\">\r\n          <div class=\"table_container\">\r\n            <el-table :data=\"tableData\" height=\"350\" style=\"width: 600px\" border size=\"large\" @row-click=\"handleRowClick\" :row-class-name=\"tableRowClassName\" :highlight-current-row=\"true\">\r\n              <el-table-column prop=\"cla_id\" label=\"教学班 ID\" width=\"250px\"></el-table-column>\r\n              <el-table-column prop=\"cou_name\" label=\"课程名称\" width=\"350px\"></el-table-column>\r\n            </el-table>\r\n            <div class=\"button_container\">\r\n              <el-button type=\"success\" size=\"large\" :disabled=\"!selectedRow\" style=\"width: 200px; height: 50px; font-size: 18px;\" @click=\"goToSpecificGrade\">进入评分</el-button>\r\n              <el-button size=\"large\" style=\"width: 200px; height: 50px; font-size: 18px;\" @click=\"clearSelection\">取消</el-button>\r\n            </div>\r\n          </div>\r\n        </el-main>\r\n        <router-view></router-view>\r\n      </el-container>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>  \r\nimport axios from 'axios';  \r\n\r\nexport default {  \r\n  data() {  \r\n    return {  \r\n      user_id: '',  \r\n      user_account: '',  \r\n      IsChangetchGradeRoute: false,  \r\n      selectedRow: null, // 用来存储选中的行  \r\n      tableData: [] // 初始化为空数组  \r\n    };  \r\n  },  \r\n  watch: {  \r\n    '$route'(to) {  \r\n      this.checkRoute(to);  \r\n    }  \r\n  },  \r\n  created() {  \r\n    // 从查询参数中获取 id 和账号  \r\n    this.user_id = this.$route.query.user_id;  \r\n    this.user_account = this.$route.query.user_account;  \r\n    this.checkRoute(this.$route);  \r\n    this.fetchTableData(); // 获取表格数据  \r\n  },  \r\n  methods: {  \r\n    checkRoute(route) {  \r\n      const ChangetchGradeRoute = [  \r\n        'tch_specific_grade'  \r\n      ];  \r\n      this.IsChangetchGradeRoute = ChangetchGradeRoute.includes(route.name);  \r\n    },  \r\n    goToTeacherHome() {  \r\n      this.$router.go(-1);  \r\n    },  \r\n    goToSpecificGrade() {  \r\n      const { cla_id, cou_name } = this.selectedRow;  \r\n      this.$router.push({  \r\n        name: 'tch_specific_grade',  \r\n        query: {  \r\n          user_id: this.user_id,  \r\n          user_account: this.user_account,  \r\n          cla_id: cla_id, // 传递教学班ID  \r\n          cou_name: cou_name // 传递课程名称  \r\n        }  \r\n      });  \r\n    },  \r\n    handleRowClick(row) {  \r\n      this.selectedRow = row;  \r\n      console.log('选中的行：', row);  \r\n    },  \r\n    tableRowClassName(row) {  \r\n      return row === this.selectedRow ? 'highlight-row' : '';  \r\n    },  \r\n    clearSelection() {  \r\n      this.selectedRow = null;  \r\n      console.log('取消选择，已清空选中的行');  \r\n    },  \r\n    fetchTableData() {  \r\n      // 使用 GET 请求，将 claTchId 作为查询参数  \r\n      const claTchId = this.user_id; // 根据实际情况设置 claTchId  \r\n\r\n      // 发送 GET 请求  \r\n      axios.get('http://localhost:8080/tch/studentGrade/conditionSearch2', {  \r\n        params: {  \r\n          claTchId: claTchId // 将参数添加到查询字符串中  \r\n        }  \r\n      })  \r\n      .then(response => {  \r\n        // 处理响应数据，去重  \r\n        const uniqueCourses = {};  \r\n        response.data.forEach(item => {  \r\n          if (!uniqueCourses[item.claID]) {  \r\n            uniqueCourses[item.claID] = item.couName;  \r\n          }  \r\n        });  \r\n\r\n        // 将去重后的数据转换为数组  \r\n        this.tableData = Object.keys(uniqueCourses).map(claID => ({  \r\n          cla_id: claID,  \r\n          cou_name: uniqueCourses[claID]  \r\n        }));  \r\n      })  \r\n      .catch(error => {  \r\n        console.error('获取表格数据失败:', error);  \r\n      });  \r\n    }  \r\n  }  \r\n}  \r\n</script>\r\n\r\n<style lang='stylus' scoped>\r\nhtml, body {  \r\n  height: 100%; /* 设置html和body的高度为100% */  \r\n  margin: 0; /* 去掉默认的margin */  \r\n  overflow: hidden; /* 隐藏body的滚动条 */  \r\n}  \r\n\r\n.el-container {  \r\n  display: flex;  \r\n  flex-direction: column;  \r\n  height: 100%; /* 设置容器高度为100% */  \r\n}  \r\n\r\n.el-header {  \r\n  position: fixed;  \r\n  top: 0;  \r\n  left: 0;  \r\n  right: 0;  \r\n  background-color: var(--el-color-primary-light-3);  \r\n  color: black;  \r\n  height: 12%;   \r\n  z-index: 1000;  \r\n  display: flex;  \r\n  align-items: center;  \r\n  justify-content: space-between;  \r\n  padding: 0 20px;  \r\n}  \r\n\r\n.grade-content {  \r\n  height: 100%;  \r\n  overflow-y: auto; /* 允许垂直滚动 */  \r\n}  \r\n\r\n.badge {  \r\n  width: 85px;  \r\n  height: 85px;  \r\n  margin-left: 0;  \r\n  margin-right: 10px;  \r\n  border-radius: 50%;  \r\n}  \r\n\r\n.user-info {  \r\n  margin-left: 20px;   \r\n  margin-right: 50px;   \r\n}  \r\n\r\n.table_container {\r\n  display: flex;\r\n  margin-top: 150px;\r\n  margin-left: 150px;\r\n  text-align: center;\r\n}\r\n\r\n.button_container {\r\n  position: absolute;\r\n  margin-top: 35px;\r\n  right: 200px; /* 距离右侧 20px */\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* 按钮右对齐 */\r\n  gap: 200px; /* 按钮之间的间隔 */\r\n}\r\n\r\n.el-table thead th {\r\n  background-color: #f5f5f5; /* 更换表头背景颜色 */\r\n}\r\n\r\n.el-table th,  \r\n.el-table td {  \r\n  text-align: center; /* 让表格内容居中对齐 */  \r\n}\r\n\r\n/* 自定义选中行的样式 */\r\n.highlight-row {\r\n  background-color: #f0f9eb; /* 选中行的背景色 */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}