{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      user_id: '',\n      user_account: '',\n      IsChangetchGradeRoute: false,\n      selectedRow: null,\n      // 用来存储选中的行\n      tableData: [] // 初始为空数组，稍后从接口获取数据\n    };\n  },\n  watch: {\n    '$route'(to) {\n      this.checkRoute(to); // 监听路由变化  \n    }\n  },\n  created() {\n    // 从查询参数中获取 id 和账号\n    this.user_id = this.$route.query.user_id;\n    this.user_account = this.$route.query.user_account;\n    this.checkRoute(this.$route); // 确认当前路由\n    this.fetchTableData(); // 获取表格数据\n  },\n  methods: {\n    checkRoute(route) {\n      // 检查当前路由是否是需要单独显示的页面  \n      const ChangetchGradeRoute = ['tch_specific_grade'];\n      this.IsChangetchGradeRoute = ChangetchGradeRoute.includes(route.name);\n    },\n    goToTeacherHome() {\n      this.$router.go(-1);\n    },\n    goToSpecificGrade() {\n      const {\n        cla_id,\n        cou_name\n      } = this.selectedRow;\n      this.$router.push({\n        name: 'tch_specific_grade',\n        query: {\n          user_id: this.user_id,\n          user_account: this.user_account,\n          cla_id: cla_id,\n          // 传递教学班ID\n          cou_name: cou_name // 传递课程名称\n        }\n      });\n    },\n    // 行点击事件，选择该行\n    handleRowClick(row) {\n      this.selectedRow = row; // 将选中的行存储到selectedRow\n      console.log('选中的行：', row); // 打印选中的行\n    },\n    // 根据选中的行设置行的类名\n    tableRowClassName(row) {\n      // 如果当前行是选中的行，返回自定义的高亮样式类\n      return row === this.selectedRow ? 'highlight-row' : '';\n    },\n    // 清空选中的行\n    clearSelection() {\n      this.selectedRow = null; // 清空选中的行\n      console.log('取消选择，已清空选中的行');\n    },\n    fetchTableData() {\n      axios.post('http://localhost:8080/tch/studentGrade/conditionSearch2', {\n        claTchId: this.user_id\n      }).then(response => {\n        // 处理响应数据\n        const courses = response.data;\n        const uniqueCourses = this.getUniqueCourses(courses);\n        this.tableData = uniqueCourses;\n      }).catch(error => {\n        console.error('Error fetching table data:', error);\n      });\n    },\n    getUniqueCourses(courses) {\n      const uniqueCourses = new Map();\n      return courses.filter(course => {\n        const key = `${course.claID}-${course.couName}`;\n        if (!uniqueCourses.has(key)) {\n          uniqueCourses.set(key, course);\n          return true;\n        }\n        return false;\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","user_id","user_account","IsChangetchGradeRoute","selectedRow","tableData","watch","$route","to","checkRoute","created","query","fetchTableData","methods","route","ChangetchGradeRoute","includes","name","goToTeacherHome","$router","go","goToSpecificGrade","cla_id","cou_name","push","handleRowClick","row","console","log","tableRowClassName","clearSelection","post","claTchId","then","response","courses","uniqueCourses","getUniqueCourses","catch","error","Map","filter","course","key","claID","couName","has","set"],"sources":["D:\\vue_project\\test_project\\jiaowusystem2\\src\\views\\main\\tch_grade.vue"],"sourcesContent":["<template>\r\n  <div class=\"grade-content\">\r\n    <div v-if=\"IsChangetchGradeRoute\">  \r\n      <router-view></router-view> <!-- 仅渲染子组件 -->  \r\n    </div> \r\n    <div v-if=\"!IsChangetchGradeRoute\">\r\n      <el-container>\r\n        <el-header> \r\n          <img src=\"@/assets/2.jpg\" alt=\"Icon\" class=\"badge\"> \r\n          <h3 style=\"margin-right: auto;\">某某学校教师端——我的评分页面</h3>    \r\n          <div class=\"user-info\">  \r\n            <h3>账号：{{ user_account }}</h3>  \r\n            <h3>ID: {{ user_id }}</h3>  \r\n          </div>  \r\n          <el-button type=\"danger\" style=\"float: right;\" @click=\"goToTeacherHome\">返回</el-button>  \r\n        </el-header>\r\n\r\n        <el-main class=\"main-content\">\r\n          <div class=\"table_container\">\r\n            <el-table :data=\"tableData\" height=\"350\" style=\"width: 600px\" border size=\"large\" @row-click=\"handleRowClick\" :row-class-name=\"tableRowClassName\" :highlight-current-row=\"true\">\r\n              <el-table-column prop=\"cla_id\" label=\"教学班 ID\" width=\"250px\"></el-table-column>\r\n              <el-table-column prop=\"cou_name\" label=\"课程名称\" width=\"350px\"></el-table-column>\r\n            </el-table>\r\n            <div class=\"button_container\">\r\n              <el-button type=\"success\" size=\"large\" :disabled=\"!selectedRow\" style=\"width: 200px; height: 50px; font-size: 18px;\" @click=\"goToSpecificGrade\">进入评分</el-button>\r\n              <el-button size=\"large\" style=\"width: 200px; height: 50px; font-size: 18px;\" @click=\"clearSelection\">取消</el-button>\r\n            </div>\r\n          </div>\r\n        </el-main>\r\n        <router-view></router-view>\r\n      </el-container>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      user_id: '',\r\n      user_account: '',\r\n      IsChangetchGradeRoute: false,\r\n      selectedRow: null, // 用来存储选中的行\r\n      tableData: [], // 初始为空数组，稍后从接口获取数据\r\n    };\r\n  },\r\n  watch: {  \r\n    '$route'(to) {  \r\n      this.checkRoute(to); // 监听路由变化  \r\n    }  \r\n  }, \r\n  created() {\r\n    // 从查询参数中获取 id 和账号\r\n    this.user_id = this.$route.query.user_id;\r\n    this.user_account = this.$route.query.user_account;\r\n    this.checkRoute(this.$route); // 确认当前路由\r\n    this.fetchTableData(); // 获取表格数据\r\n  },\r\n  methods: {\r\n    checkRoute(route) {  \r\n      // 检查当前路由是否是需要单独显示的页面  \r\n      const ChangetchGradeRoute = [  \r\n        'tch_specific_grade' \r\n      ];  \r\n      this.IsChangetchGradeRoute = ChangetchGradeRoute.includes(route.name);  \r\n    },\r\n    goToTeacherHome() {\r\n      this.$router.go(-1);\r\n    },\r\n    goToSpecificGrade() {\r\n      const { cla_id, cou_name } = this.selectedRow;\r\n      this.$router.push({\r\n        name: 'tch_specific_grade',\r\n        query: {\r\n          user_id: this.user_id,\r\n          user_account: this.user_account,\r\n          cla_id: cla_id,               // 传递教学班ID\r\n          cou_name: cou_name           // 传递课程名称\r\n        }\r\n      });\r\n    },\r\n    // 行点击事件，选择该行\r\n    handleRowClick(row) {\r\n      this.selectedRow = row;  // 将选中的行存储到selectedRow\r\n      console.log('选中的行：', row);  // 打印选中的行\r\n    },\r\n    // 根据选中的行设置行的类名\r\n    tableRowClassName(row) {\r\n      // 如果当前行是选中的行，返回自定义的高亮样式类\r\n      return row === this.selectedRow ? 'highlight-row' : '';\r\n    },\r\n    // 清空选中的行\r\n    clearSelection() {\r\n      this.selectedRow = null;  // 清空选中的行\r\n      console.log('取消选择，已清空选中的行');\r\n    },\r\n    fetchTableData() {\r\n      axios.post('http://localhost:8080/tch/studentGrade/conditionSearch2', {\r\n        claTchId: this.user_id\r\n      })\r\n      .then(response => {\r\n        // 处理响应数据\r\n        const courses = response.data;\r\n        const uniqueCourses = this.getUniqueCourses(courses);\r\n        this.tableData = uniqueCourses;\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching table data:', error);\r\n      });\r\n    },\r\n    getUniqueCourses(courses) {\r\n      const uniqueCourses = new Map();\r\n      return courses.filter(course => {\r\n        const key = `${course.claID}-${course.couName}`;\r\n        if (!uniqueCourses.has(key)) {\r\n          uniqueCourses.set(key, course);\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='stylus' scoped>\r\nhtml, body {  \r\n  height: 100%; /* 设置html和body的高度为100% */  \r\n  margin: 0; /* 去掉默认的margin */  \r\n  overflow: hidden; /* 隐藏body的滚动条 */  \r\n}  \r\n\r\n.el-container {  \r\n  display: flex;  \r\n  flex-direction: column;  \r\n  height: 100%; /* 设置容器高度为100% */  \r\n}  \r\n\r\n.el-header {  \r\n  position: fixed;  \r\n  top: 0;  \r\n  left: 0;  \r\n  right: 0;  \r\n  background-color: var(--el-color-primary-light-3);  \r\n  color: black;  \r\n  height: 12%;   \r\n  z-index: 1000;  \r\n  display: flex;  \r\n  align-items: center;  \r\n  justify-content: space-between;  \r\n  padding: 0 20px;  \r\n}  \r\n\r\n.grade-content {  \r\n  height: 100%;  \r\n  overflow-y: auto; /* 允许垂直滚动 */  \r\n}  \r\n\r\n.badge {  \r\n  width: 85px;  \r\n  height: 85px;  \r\n  margin-left: 0;  \r\n  margin-right: 10px;  \r\n  border-radius: 50%;  \r\n}  \r\n\r\n.user-info {  \r\n  margin-left: 20px;   \r\n  margin-right: 50px;   \r\n}  \r\n\r\n.table_container {\r\n  display: flex;\r\n  margin-top: 150px;\r\n  margin-left: 150px;\r\n  text-align: center;\r\n}\r\n\r\n.button_container {\r\n  position: absolute;\r\n  margin-top: 35px;\r\n  right: 200px; /* 距离右侧 20px */\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* 按钮右对齐 */\r\n  gap: 200px; /* 按钮之间的间隔 */\r\n}\r\n\r\n.el-table thead th {\r\n  background-color: #f5f5f5; /* 更换表头背景颜色 */\r\n}\r\n\r\n.el-table th,  \r\n.el-table td {  \r\n  text-align: center; /* 让表格内容居中对齐 */  \r\n}\r\n\r\n/* 自定义选中行的样式 */\r\n.highlight-row {\r\n  background-color: #f0f9eb; /* 选中行的背景色 */\r\n}\r\n</style>\r\n"],"mappings":";;;AAoCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXC,YAAY,EAAE,EAAE;MAChBC,qBAAqB,EAAE,KAAK;MAC5BC,WAAW,EAAE,IAAI;MAAE;MACnBC,SAAS,EAAE,EAAE,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACL,QAAQC,CAACC,EAAE,EAAE;MACX,IAAI,CAACC,UAAU,CAACD,EAAE,CAAC,EAAE;IACvB;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACT,OAAM,GAAI,IAAI,CAACM,MAAM,CAACI,KAAK,CAACV,OAAO;IACxC,IAAI,CAACC,YAAW,GAAI,IAAI,CAACK,MAAM,CAACI,KAAK,CAACT,YAAY;IAClD,IAAI,CAACO,UAAU,CAAC,IAAI,CAACF,MAAM,CAAC,EAAE;IAC9B,IAAI,CAACK,cAAc,CAAC,CAAC,EAAE;EACzB,CAAC;EACDC,OAAO,EAAE;IACPJ,UAAUA,CAACK,KAAK,EAAE;MAChB;MACA,MAAMC,mBAAkB,GAAI,CAC1B,oBAAmB,CACpB;MACD,IAAI,CAACZ,qBAAoB,GAAIY,mBAAmB,CAACC,QAAQ,CAACF,KAAK,CAACG,IAAI,CAAC;IACvE,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACC,OAAO,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACDC,iBAAiBA,CAAA,EAAG;MAClB,MAAM;QAAEC,MAAM;QAAEC;MAAS,IAAI,IAAI,CAACnB,WAAW;MAC7C,IAAI,CAACe,OAAO,CAACK,IAAI,CAAC;QAChBP,IAAI,EAAE,oBAAoB;QAC1BN,KAAK,EAAE;UACLV,OAAO,EAAE,IAAI,CAACA,OAAO;UACrBC,YAAY,EAAE,IAAI,CAACA,YAAY;UAC/BoB,MAAM,EAAEA,MAAM;UAAgB;UAC9BC,QAAQ,EAAEA,QAAO,CAAY;QAC/B;MACF,CAAC,CAAC;IACJ,CAAC;IACD;IACAE,cAAcA,CAACC,GAAG,EAAE;MAClB,IAAI,CAACtB,WAAU,GAAIsB,GAAG,EAAG;MACzBC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAAC,EAAG;IAC9B,CAAC;IACD;IACAG,iBAAiBA,CAACH,GAAG,EAAE;MACrB;MACA,OAAOA,GAAE,KAAM,IAAI,CAACtB,WAAU,GAAI,eAAc,GAAI,EAAE;IACxD,CAAC;IACD;IACA0B,cAAcA,CAAA,EAAG;MACf,IAAI,CAAC1B,WAAU,GAAI,IAAI,EAAG;MAC1BuB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC7B,CAAC;IACDhB,cAAcA,CAAA,EAAG;MACfb,KAAK,CAACgC,IAAI,CAAC,yDAAyD,EAAE;QACpEC,QAAQ,EAAE,IAAI,CAAC/B;MACjB,CAAC,EACAgC,IAAI,CAACC,QAAO,IAAK;QAChB;QACA,MAAMC,OAAM,GAAID,QAAQ,CAAClC,IAAI;QAC7B,MAAMoC,aAAY,GAAI,IAAI,CAACC,gBAAgB,CAACF,OAAO,CAAC;QACpD,IAAI,CAAC9B,SAAQ,GAAI+B,aAAa;MAChC,CAAC,EACAE,KAAK,CAACC,KAAI,IAAK;QACdZ,OAAO,CAACY,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CAAC;IACJ,CAAC;IACDF,gBAAgBA,CAACF,OAAO,EAAE;MACxB,MAAMC,aAAY,GAAI,IAAII,GAAG,CAAC,CAAC;MAC/B,OAAOL,OAAO,CAACM,MAAM,CAACC,MAAK,IAAK;QAC9B,MAAMC,GAAE,GAAI,GAAGD,MAAM,CAACE,KAAK,IAAIF,MAAM,CAACG,OAAO,EAAE;QAC/C,IAAI,CAACT,aAAa,CAACU,GAAG,CAACH,GAAG,CAAC,EAAE;UAC3BP,aAAa,CAACW,GAAG,CAACJ,GAAG,EAAED,MAAM,CAAC;UAC9B,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CAAC,CAAC;IACJ;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}